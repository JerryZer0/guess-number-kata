package tw.core;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tw.core.exception.AnswerFormatIncorrectException;
import tw.core.exception.OutOfGuessCountException;
import tw.core.generator.AnswerGenerator;
import tw.core.generator.RandomIntGenerator;
import tw.core.model.GuessResult;

import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class GameTest {

    private final Answer actualAnswer = Answer.createAnswer("1 2 3 4");
    private Game game;
    private GameStatus gameStatus = new GameStatus();

    @BeforeEach
    public void setUp() throws Exception {
        AnswerGenerator answerGenerator = mock(AnswerGenerator.class);
        when(answerGenerator.generate()).thenReturn(actualAnswer);
        game = new Game(answerGenerator);
    }

    @Test
    public void should_return_continue_when_input_times_smaller_than_MAX_TIMES(){
        Answer actualAnswer = Answer.createAnswer("1 5 3 4");
        try{
            game.guess(actualAnswer);
        }catch (OutOfGuessCountException e){
        }
        assertThat(game.checkStatus(),is("continue"));
    }

    @Test
    public void should_return_fail_when_input_times_is_MAX_TIMES(){
        Answer actualAnswer = Answer.createAnswer("1 5 3 4");
        Answer actualAnswer2 = Answer.createAnswer("1 1 3 4");
        Answer actualAnswer3 = Answer.createAnswer("2 1 3 4");
        try{
            game.guess(actualAnswer);
            game.guess(actualAnswer2);
            game.guess(actualAnswer3);
            game.guess(actualAnswer);
            game.guess(actualAnswer2);
            game.guess(actualAnswer);
        }catch (OutOfGuessCountException e){
        }
        assertThat(game.checkStatus(),is("fail"));
    }

    @Test
    public void should_return_fail_when_input_times_bigger_than_MAX_TIMES(){
        Answer actualAnswer = Answer.createAnswer("1 5 3 4");
        try{
            game.guess(actualAnswer);
            game.guess(actualAnswer);
            game.guess(actualAnswer);
            game.guess(actualAnswer);
            game.guess(actualAnswer);
            game.guess(actualAnswer);
            game.guess(actualAnswer);
        }catch (OutOfGuessCountException e){
            game.guessHistory();
            System.out.println("Try to many times");
        }
    }

    @Test
    public void should_return_success_when_input_times_bigger_than_MAX_TIMES(){
        Answer actualAnswer = Answer.createAnswer("1 2 3 4");
        try{
            game.guess(actualAnswer);
        }catch (OutOfGuessCountException e){
        }
        assertThat(game.checkStatus(),is("success"));
    }

    @Test
    public void should_throw_exception_when_input_bigger_than_10(){
        Answer actualAnswer = Answer.createAnswer("11 2 3 4");
        try{
            actualAnswer.validate();
        }catch (AnswerFormatIncorrectException e){
            System.out.println("The number is too big!\n"+actualAnswer.toString());
        }
    }

    @Test
    public void should_not_throw_exception_when_input_is_right(){
        Answer actualAnswer = Answer.createAnswer("1 2 3 4");
        try{
            actualAnswer.validate();
        }catch (AnswerFormatIncorrectException e){
            System.out.println("The number is too big!");
        }
    }

    @Test
    public void should_get_the_success_status_when_guess_input_is_correct() throws Exception {

        //given
//        excuteSuccessGuess();
        GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
        //when
        //then
        assertThat(guess.getResult(), is("4A0B"));
        //add
        guess.getInputAnswer();
    }

    @Test
    public void use_AnswerGenerator(){
        RandomIntGenerator r = new RandomIntGenerator();
        try {
            r.generateNums(11,12);
        }catch (IllegalArgumentException e){

        }
        AnswerGenerator answerGenerator = new AnswerGenerator(r);
        try {
            answerGenerator.generate();
        }catch (AnswerFormatIncorrectException e){

        }
    }


}
